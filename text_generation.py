# -*- coding: utf-8 -*-
"""Text_Generation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nnfM7EfbqPuq05bg9igKkZ9BDXeiO7FY
"""
import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib as plt
import os

# Step 1: Load the dataset
dataset, info = tfds.load('tiny_shakespeare', with_info=True, as_supervised=False)
text = next(iter(dataset['train']))['text'].numpy().decode('utf-8')
print(info)

# Get the training data example
shakespeare_data = dataset['train']

# View as a Python iterator
for example in shakespeare_data.take(1):
    raw_text = example['text'].numpy().decode('utf-8')
    print("üìú Sample from Tiny Shakespeare Dataset:\n")
    print(raw_text[:1000])  # First 1000 characters

print(f"\nüî¢ Total characters in dataset: {len(raw_text)}")

# Step 2: Create character mapping
vocab = sorted(set(text))
char2idx = {char: idx for idx, char in enumerate(vocab)}
idx2char = np.array(vocab)
text_as_int = np.array([char2idx[c] for c in text])

# Step 3: Create training sequences
seq_length = 100
char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)
sequences = char_dataset.batch(seq_length + 1, drop_remainder=True)

def split_input_target(chunk):
    input_text = chunk[:-1]
    target_text = chunk[1:]
    return input_text, target_text

dataset = sequences.map(split_input_target)

# Step 4: Prepare data pipeline
BATCH_SIZE = 64
BUFFER_SIZE = 10000
dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True).prefetch(tf.data.experimental.AUTOTUNE)

# Step 5: Define model parameters
vocab_size = len(vocab)
embedding_dim = 256
rnn_units = 1024

def build_model(vocab_size, embedding_dim, rnn_units, batch_size):
    return tf.keras.Sequential([
        tf.keras.layers.Embedding(vocab_size, embedding_dim),
        tf.keras.layers.LSTM(rnn_units, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'),
        tf.keras.layers.Dense(vocab_size)
    ])

# Step 6: Build & compile the training model
model = build_model(vocab_size, embedding_dim, rnn_units, BATCH_SIZE)

def loss(labels, logits):
    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)

model.compile(optimizer='adam', loss=loss)

# Step 7: Set up checkpoint saving
checkpoint_dir = './training_checkpoints'
os.makedirs(checkpoint_dir, exist_ok=True)
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}.weights.h5")

checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True
)

# Step 8: Train the model
EPOCHS = 30
history = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])

import os
print("‚úÖ Checkpoints:", os.listdir('./training_checkpoints'))
print("‚úÖ Latest checkpoint path:", tf.train.latest_checkpoint('./training_checkpoints'))

# Step 9: Plot training loss
plt.plot(history.history['loss'], label='Training Loss')
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Training Loss Over Epochs")
plt.legend()
plt.show()

# Step 10: Rebuild model for generation (batch size = 1)
model_gen = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)

import os
import re
import tensorflow as tf

# Get the latest weights file manually
def get_latest_checkpoint(path):
    files = os.listdir(path)
    ckpts = [f for f in files if f.endswith('.weights.h5')]
    if not ckpts:
        return None
    latest = max(ckpts, key=lambda f: int(re.search(r'ckpt_(\d+)', f).group(1)))
    return os.path.join(path, latest)

# Load the latest weights
checkpoint_dir = './training_checkpoints'
checkpoint_path = get_latest_checkpoint(checkpoint_dir)

if checkpoint_path:
    # Build the model with the correct input shape for generation
    model_gen = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)
    # Explicitly build the model with a defined input shape
    model_gen.build(tf.TensorShape([1, None]))
    # Load the weights
    model_gen.load_weights(checkpoint_path)
    print("‚úÖ Checkpoint loaded:", checkpoint_path)
    # Print the model summary after loading weights
    model_gen.summary()
else:
    print("‚ùå No checkpoint found.")

# Step 12: Generate text function with temperature
def generate_text(model_gen, start_string, num_generate=1000, temperature=1.0):
    input_eval = [char2idx[s] for s in start_string]
    input_eval = tf.expand_dims(input_eval, 0)
    text_generated = []

    # Reset states of stateful layers
    for layer in model_gen.layers:
        if hasattr(layer, 'reset_states') and layer.stateful:
            layer.reset_states()


    for _ in range(num_generate):
        predictions = model_gen(input_eval)
        predictions = tf.squeeze(predictions, 0)
        predictions = predictions / temperature
        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1, 0].numpy()
        input_eval = tf.expand_dims([predicted_id], 0)
        text_generated.append(idx2char[predicted_id])

    return start_string + ''.join(text_generated)

# Step 13: Generate and print text
print("\nüìù Generated Text:\n")
print(generate_text(model_gen, start_string="QUEEN: So, lets end this", temperature=0.6))